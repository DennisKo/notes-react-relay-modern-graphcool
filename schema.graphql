input CreateNoteItem {
  text: String!
}

input CreateNoteItemInput {
  text: String!
  clientMutationId: String!
}

type CreateNoteItemPayload {
  viewer: Viewer!
  clientMutationId: String!
  noteItem: NoteItem
  edge: NoteItemEdge
}

scalar DateTime

input DeleteNoteItemInput {
  id: ID!
  clientMutationId: String!
}

type DeleteNoteItemPayload {
  viewer: Viewer!
  clientMutationId: String!
  noteItem: NoteItem
  edge: NoteItemEdge
  deletedId: ID
}

type Mutation {
  createNoteItem(input: CreateNoteItemInput!): CreateNoteItemPayload
  updateNoteItem(input: UpdateNoteItemInput!): UpdateNoteItemPayload
  updateOrCreateNoteItem(input: UpdateOrCreateNoteItemInput!): UpdateOrCreateNoteItemPayload
  deleteNoteItem(input: DeleteNoteItemInput!): DeleteNoteItemPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

type NoteItem implements Node {
  createdAt: DateTime!
  id: ID!
  text: String!
  updatedAt: DateTime!
}

# A connection to a list of items.
type NoteItemConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [NoteItemEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type NoteItemEdge {
  # The item at the end of the edge.
  node: NoteItem!

  # A cursor for use in pagination.
  cursor: String!
}

input NoteItemFilter {
  # Logical AND on all given filters.
  AND: [NoteItemFilter!]

  # Logical OR on all given filters.
  OR: [NoteItemFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  text: String

  # All values that are not equal to given value.
  text_not: String

  # All values that are contained in given list.
  text_in: [String!]

  # All values that are not contained in given list.
  text_not_in: [String!]

  # All values less than the given value.
  text_lt: String

  # All values less than or equal the given value.
  text_lte: String

  # All values greater than the given value.
  text_gt: String

  # All values greater than or equal the given value.
  text_gte: String

  # All values containing the given string.
  text_contains: String

  # All values not containing the given string.
  text_not_contains: String

  # All values starting with the given string.
  text_starts_with: String

  # All values not starting with the given string.
  text_not_starts_with: String

  # All values ending with the given string.
  text_ends_with: String

  # All values not ending with the given string.
  text_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
}

enum NoteItemOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  viewer: Viewer!

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

input UpdateNoteItem {
  id: ID!
  text: String
}

input UpdateNoteItemInput {
  id: ID!
  text: String
  clientMutationId: String!
}

type UpdateNoteItemPayload {
  viewer: Viewer!
  clientMutationId: String!
  noteItem: NoteItem
  edge: NoteItemEdge
}

input UpdateOrCreateNoteItemInput {
  update: UpdateNoteItem!
  create: CreateNoteItem!
  clientMutationId: String!
}

type UpdateOrCreateNoteItemPayload {
  viewer: Viewer!
  clientMutationId: String!
  noteItem: NoteItem
  edge: NoteItemEdge
}

# This is the famous Relay viewer object
type Viewer {
  allNoteItems(filter: NoteItemFilter, orderBy: NoteItemOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): NoteItemConnection!
  NoteItem(id: ID): NoteItem
  id: ID!
}

